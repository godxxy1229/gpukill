#!/bin/bash

# Script to detect GPU idle state and terminate the process using the most GPU memory if idle

# Check GPU status using nvidia-smi
GPU_INFO=$(nvidia-smi --query-gpu=index,power.draw,power.limit,utilization.gpu,memory.used --format=csv,noheader,nounits)

# Parse and extract GPU information
GPU_INDEX=$(echo "$GPU_INFO" | awk -F',' '{print $1}')
POWER_DRAW=$(echo "$GPU_INFO" | awk -F',' '{print $2}')   # Current power consumption (W)
POWER_LIMIT=$(echo "$GPU_INFO" | awk -F',' '{print $3}')  # Power limit (W)
GPU_UTIL=$(echo "$GPU_INFO" | awk -F',' '{print $4}')     # GPU utilization (%)
MEMORY_USED=$(echo "$GPU_INFO" | awk -F',' '{print $5}')  # Memory usage (MiB)

# Thresholds for defining GPU idle state
IDLE_POWER_THRESHOLD=100    # Consider idle if power < 100W
IDLE_UTIL_THRESHOLD=20      # Consider idle if utilization < 20%
IDLE_MEMORY_THRESHOLD=8192  # Consider idle if memory usage < 8192MiB

# Function to check if the GPU is idle
check_gpu_idle() {
    if (( $(echo "$POWER_DRAW < $IDLE_POWER_THRESHOLD" | bc -l) )) && \
       (( "$GPU_UTIL" < "$IDLE_UTIL_THRESHOLD" )) && \
       (( "$MEMORY_USED" < "$IDLE_MEMORY_THRESHOLD" )); then
        return 0  # GPU is considered idle
    else
        return 1  # GPU is considered in use
    fi
}

# Function to terminate the process using the most GPU memory
terminate_largest_gpu_process() {
    LARGEST_INFO=$(nvidia-smi --query-compute-apps=pid,process_name,used_memory --format=csv,noheader,nounits | sort -k3 -nr | head -n 1)

    # Check if any GPU process is found
    if [ -z "$LARGEST_INFO" ]; then
        echo "No GPU processes are currently running."
        return
    fi

    LARGEST_PID=$(echo $LARGEST_INFO | awk '{print $1}' | sed 's/,//')
    PROCESS_NAME=$(echo $LARGEST_INFO | awk '{print $2}')
    LARGEST_MEMORY=$(echo $LARGEST_INFO | awk '{print $3}')

    USER=$(ps -o user= -p $LARGEST_PID 2>/dev/null)

    # Ask for user confirmation before killing the process
    echo "Process using the most GPU memory:"
    echo "User: ${USER:-Unknown}"
    echo "PID: $LARGEST_PID"
    echo "Process Name: $PROCESS_NAME"
    echo "GPU Memory Usage: $LARGEST_MEMORY MiB"

    read -p "Are you sure you want to terminate this process? Please confirm with the user before proceeding. [y/N]: " CONFIRM
    if [[ "$CONFIRM" =~ ^[Yy]$ ]]; then
        echo "Terminating process $LARGEST_PID (User: ${USER:-Unknown})..."
        kill -9 $LARGEST_PID
        echo "Process $LARGEST_PID has been terminated."
    else
        echo "Termination cancelled."
    fi
}

# Main script execution
if check_gpu_idle; then
    echo "GPU $GPU_INDEX is detected as idle. (Power: $POWER_DRAW / $POWER_LIMIT W, Utilization: $GPU_UTIL%, Memory: $MEMORY_USED MiB)"
    terminate_largest_gpu_process
else
    echo "GPU $GPU_INDEX is currently in use. (Power: $POWER_DRAW / $POWER_LIMIT W, Utilization: $GPU_UTIL%, Memory: $MEMORY_USED MiB)"
    echo "The GPU appears to be active. Terminating the process is not recommended."
    read -p "Do you still want to proceed with terminating the process? [y/N]: " CONFIRM
    terminate_largest_gpu_process
fi
